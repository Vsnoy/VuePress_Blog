(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{461:function(s,a,n){"use strict";n.r(a);var e=n(14),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"作用域链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[s._v("#")]),s._v(" 作用域链")]),s._v(" "),n("p",[s._v("几乎所有编程语言最基本的功能之一，就是能够储存变量当中的值并且能在之后对这个值进行访问或修改。而作用域就是这么一套规则，用于确定在何处以及如何查找变量。\n"),n("code",[s._v("JS")]),s._v(" 中，作用域分为全局作用域、函数作用域以及块级作用域。")]),s._v(" "),n("h2",{attrs:{id:"作用域定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域定义"}},[s._v("#")]),s._v(" 作用域定义")]),s._v(" "),n("p",[s._v("作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。")]),s._v(" "),n("h2",{attrs:{id:"作用域分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域分类"}},[s._v("#")]),s._v(" 作用域分类")]),s._v(" "),n("h3",{attrs:{id:"全局作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域"}},[s._v("#")]),s._v(" 全局作用域")]),s._v(" "),n("p",[s._v("所有在函数外部声明的变量都处于全局作用域中。全局作用域中声明的变量和函数会作为全局对象 "),n("code",[s._v("window")]),s._v(" 的属性和方法保存，可被任意访问，其生命周期伴随着页面的生命周期。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = 10 // 可省略 var\nvar b = 20\n\nfunction an(){\n  c = 3 // 函数作用域中未声明而直接赋值的变量，属于全局变量\n  console.log('an')\n}\n\nvar bn = function(){\n  console.log('bn')\n}\n\nconsole.log(window)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("如上，"),n("code",[s._v("a")]),s._v("、"),n("code",[s._v("b")]),s._v("、"),n("code",[s._v("c")]),s._v(" 以及 "),n("code",[s._v("an")]),s._v("、"),n("code",[s._v("bn")]),s._v(" 都在全局作用域中，而全局作用域中声明的变量和函数会作为 "),n("code",[s._v("window")]),s._v(" 对象的属性和方法保存。")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("在函数作用域中，不使用变量关键字声明的变量，在赋值时会往上一级作用域寻找已经声明的同名变量，若直到全局作用域时还没找到，则会成为全局对象 "),n("code",[s._v("window")]),s._v(" 的属性。")])]),s._v(" "),n("li",[n("p",[s._v("在没有块级作用域的情况下，"),n("code",[s._v("for")]),s._v("、"),n("code",[s._v("if")]),s._v(" 等代码块中声明的变量也属于全局变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for(var i = 0; i < 10; i++) { ... }\nconsole.log(i) // 10\n\nif(true) { var a = 1 }\nconsole.log(a) // 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])])]),s._v(" "),n("h3",{attrs:{id:"函数作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[s._v("#")]),s._v(" 函数作用域")]),s._v(" "),n("p",[s._v("函数声明内的词法作用域。函数内部定义的变量或函数只能在函数内部被访问。函数执行结束之后，函数内部定义的局部变量会被销毁（"),n("strong",[s._v("闭包")]),s._v("除外）。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a = 1\n\nfunction foo(){ \n  var b = 2 \n  console.log(a) // 1\n  console.log(b) // 2\n} \n\nfoo();\n\nconsole.log(a) // 1\nconsole.log(b) // Uncaught ReferenceError: b is not defined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("如上，"),n("code",[s._v("a")]),s._v(" 是全局变量，可被任意访问，而 "),n("code",[s._v("b")]),s._v(" 是只属于函数 "),n("code",[s._v("foo")]),s._v(" 的内部变量，所以在外部访问会报错。")]),s._v(" "),n("h3",{attrs:{id:"块级作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[s._v("#")]),s._v(" 块级作用域")]),s._v(" "),n("p",[s._v("包含 "),n("code",[s._v("let")]),s._v(" 和 "),n("code",[s._v("const")]),s._v(" 关键字声明的一对 "),n("code",[s._v("{}")]),s._v(" 内的词法作用域。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n    console.log(a) // Uncaught ReferenceError: a is not defined\n    let a = 1\n    console.log(a) // 1\n}\n\nconsole.log(a) // Uncaught ReferenceError: a is not defined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这样，通过 "),n("code",[s._v("let")]),s._v(" 声明的变量就只在所在代码块内有效，不会泄漏到全局，也不会如 "),n("code",[s._v("var")]),s._v(" 声明的变量被提升到块的顶部。")]),s._v(" "),n("h2",{attrs:{id:"作用域链-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域链-2"}},[s._v("#")]),s._v(" 作用域链")]),s._v(" "),n("p",[s._v("作用域链本质上就是查找变量的链条。当访问一个变量时，解释器首先会在当前作用域中查找，\n若没找到则会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的全局作用域为止，这就是作用域链。")]),s._v(" "),n("p",[s._v("可用以下几句话来概括：")]),s._v(" "),n("ul",[n("li",[s._v("查看当前作用域，若当前作用域声明了这个变量，就确定结果")]),s._v(" "),n("li",[s._v("查看当前作用域的上级作用域中有没有声明")]),s._v(" "),n("li",[s._v("依次往上查找，直到全局作用域为止")]),s._v(" "),n("li",[s._v("若全局作用域中也没有，我们就认为这个变量未声明")])]),s._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1851118",target:"_blank",rel:"noopener noreferrer"}},[s._v("一文搞懂 JavaScript 作用域"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://blackstarxing.github.io/2018-10-18-javascript-scope.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("探访 JS 作用域"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=t.exports}}]);